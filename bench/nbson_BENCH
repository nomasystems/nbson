#!/usr/bin/env escript

-define(DEPS_PATH, "_build/bench/lib").
-define(EBIN_DIR, "ebin").
-define(BASE_DEPS, ["bson","erlperf"]).

-define(BSONS_PATH, "bench/data/").
-define(SEPARATOR, io:format
    ("--------------------------------------------------------------------------------------~n")).
-define(TABLE_HEADER, io:format
    ("~20.. s  ~20.. s  ~20.. s  ~20.. s~n", ["Size (documents)", "File size (bytes)", "Nbson Time (us)", "BsonErlang Time (us)"])).


extra_deps() ->
    ['nbson', 'bson-erlang'].

main(_) ->
    setup(),
    bench().

bench() ->
    bench_dir(?BSONS_PATH).

bench_dir(Path) ->
    Paths = filelib:wildcard(Path ++ "/*.bson"),
    ?SEPARATOR,
    io:format("DECODING PROCESS~n"),
    ?SEPARATOR,
    ?TABLE_HEADER,
    lists:foreach(fun(X) -> bench_decode(X) end, Paths),

    ?SEPARATOR,
    io:format("ENCODING PROCESS~n"),
    ?SEPARATOR,
    ?TABLE_HEADER,
    lists:foreach(fun(X) -> bench_encode(X) end, Paths).

bench_decode(Path) ->
    {ok, Bin} = file:read_file(Path),
    DocCount = doc_count(Path),
    measure_decode(Bin, DocCount).

bench_encode(Path) ->
    {ok, Bin} = file:read_file(Path),
    DocCount = doc_count(Path),
    measure_encode(Bin, DocCount).
    
measure_decode(Bin, DocCount) ->
    Size = erlang:integer_to_list(erlang:byte_size(Bin)),
    NbsonTimeDecode = erlperf:time(fun() -> nbson:decode_all(Bin) end, 10),
    BsonErlangTimeDecode = erlperf:time(fun() -> get_docs(Bin, []) end, 10),
    io:format("~20.. s  ~20.. s  ~20.. B  ~20.. B~n", [DocCount, Size, NbsonTimeDecode, BsonErlangTimeDecode]).

measure_encode(Bin, DocCount) ->
    Size = erlang:integer_to_list(erlang:byte_size(Bin)),
    {NbsonDocs, _Rest1} = nbson:decode(Bin),
    {BsonErlangDocs, _Rest2} = get_docs(Bin, []),

    NbsonTimeEncode = erlperf:time(fun() -> nbson_encode(NbsonDocs) end, 10),
    BsonErlangTimeEncode = erlperf:time(fun() -> put_docs(BsonErlangDocs) end, 10),
    io:format("~20.. s  ~20.. s  ~20.. B  ~20.. B~n", [DocCount, Size, NbsonTimeEncode, BsonErlangTimeEncode]).


nbson_encode([[{_K,_V} | _T] = Doc]) ->
    nbson:encode(Doc);
nbson_encode(List) ->
    lists:foreach(fun(Doc) -> nbson:encode(Doc) end, List).

% get_docs implementation extracted from https://github.com/comtihon/mongodb-erlang/blob/56c700f791601a201a9d5af7cad45b3c81258209/src/connection/mongo_protocol.erl#L113
get_docs(<<>>, Docs) -> {lists:reverse(Docs), <<>>};
get_docs(Bin, Docs) ->
  {Doc, Bin1} = bson_binary:get_map(Bin),
  get_docs(Bin1, [Doc | Docs]).

% Multiple documents encoding implementation taken from https://github.com/comtihon/mongodb-erlang/blob/56c700f791601a201a9d5af7cad45b3c81258209/src/connection/mongo_protocol.erl#L52
put_docs(Docs) ->
    << << <<(bson_binary:put_document(Doc))/binary>> || Doc <- Docs>>/binary >>.

doc_count(Path) ->
    [_, Filename] = string:split(Path, "/", trailing),
    [_, Filename1] = string:split(Filename, "test", trailing),
    [Number, _] = string:split(Filename1, "."),
    Number.

%%%-----------------------------------------------------------------------------
%%% UTIL FUNCTIONS
%%%-----------------------------------------------------------------------------
setup() ->
    ExtraDeps = lists:map(fun(Dep) -> erlang:atom_to_list(Dep) end, extra_deps()),
    Deps =
        lists:map(
            fun(Dep) ->
                string:join([?DEPS_PATH, Dep, ?EBIN_DIR], "/")
            end,
            ?BASE_DEPS ++ ExtraDeps
        ),
    code:add_pathsz(Deps).
